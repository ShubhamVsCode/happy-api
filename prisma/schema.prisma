generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum UserRole {
  USER
  ORG_ADMIN
  SUPER_ADMIN
}

model User {
  id             String        @id @default(auto()) @map("_id") @db.ObjectId
  name           String?
  email          String        @unique
  emailVerified  DateTime?
  image          String?
  verified       DateTime?
  password       String?
  role           UserRole      @default(USER)
  organization   Organization? @relation(fields: [organizationId], references: [id])
  organizationId String?       @db.ObjectId
  requests       Request[]
  collections    Collection[]
  accounts       Account[]
  sessions       Session[]
}

model Organization {
  id           String        @id @default(auto()) @map("_id") @db.ObjectId
  name         String        @unique
  description  String
  users        User[]
  createdById  String?       @db.ObjectId
  variables    Variable[]
  environments Environment[]
  collections  Collection[]
}

model Variable {
  id             String        @id @default(auto()) @map("_id") @db.ObjectId
  name           String
  value          String
  previousValues String[]
  environmentId  String?       @db.ObjectId
  environment    Environment?  @relation(fields: [environmentId], references: [id])
  organization   Organization? @relation(fields: [organizationId], references: [id])
  organizationId String?       @db.ObjectId
  Request        Request[]
}

model Environment {
  id             String        @id @default(auto()) @map("_id") @db.ObjectId
  name           String
  description    String
  variables      Variable[]
  collection     Collection    @relation(fields: [collectionId], references: [id])
  collectionId   String        @db.ObjectId
  organization   Organization? @relation(fields: [organizationId], references: [id])
  organizationId String?       @db.ObjectId
}

model Collection {
  id             String        @id @default(auto()) @map("_id") @db.ObjectId
  name           String        @default("New Collection")
  description    String?
  folders        Folder[]
  requests       Request[]
  environments   Environment[]
  organization   Organization? @relation(fields: [organizationId], references: [id])
  organizationId String?       @db.ObjectId

  createdById String? @db.ObjectId
  createdBy   User?   @relation(fields: [createdById], references: [id])
}

model Folder {
  id           String     @id @default(auto()) @map("_id") @db.ObjectId
  name         String     @default("New Folder")
  description  String?
  collectionId String     @db.ObjectId
  collection   Collection @relation(fields: [collectionId], references: [id])
  requests     Request[]
}

enum RequestMethod {
  GET
  POST
  PUT
  PATCH
  DELETE
}

model Request {
  id          String        @id @default(auto()) @map("_id") @db.ObjectId
  name        String        @default("New Request")
  notes       String?
  method      RequestMethod @default(GET)
  variableId  String?       @db.ObjectId
  variable    Variable?     @relation(fields: [variableId], references: [id])
  url         String        @default("")
  headers     Json?
  body        Json?
  params      Json?
  response    Json?
  error       Json?
  status      Int?
  duration    Int?
  createdAt   DateTime      @default(now())
  createdById String?       @db.ObjectId
  createdBy   User?         @relation(fields: [createdById], references: [id])
  updatedAt   DateTime      @updatedAt

  folderId     String?    @db.ObjectId
  folder       Folder?    @relation(fields: [folderId], references: [id])
  collectionId String     @db.ObjectId
  collection   Collection @relation(fields: [collectionId], references: [id])
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String   @id @default(auto()) @map("_id") @db.ObjectId
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
